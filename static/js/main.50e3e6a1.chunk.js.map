{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["calcDurability","dur","manipulation","seq","action","Array","isArray","data","singles","durability","Math","min","Object","entries","sequences","forEach","k","v","actions","useStyles","makeStyles","theme","controlRoot","marginRight","spacing","marginBottom","marginTop","solutions","solutionHeading","fontSize","typography","pxToRem","fontWeight","fontWeightMedium","solutionSubtitle","fontWeightBold","icon","Icon","classes","imgName","replace","className","src","alt","title","solve","cp","observes","model","optimize","opType","constraints","max","ob","finisher","variables","ints","fromEntries","keys","map","a","results","Solver","Solve","quality","console","log","filter","id","count","cpRemain","validatedResult","sequence","items","startsWith","push","iter","next","length","Combinatorics","permutation","validate","flat","App","useState","setDurability","setCp","setManipulation","setSolutions","carefulSyn","setCarefulSyn","showAlert","setShowAlert","displayInfo","setDisplayInfo","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","color","TextField","label","value","onChange","ev","parseInt","target","FormControlLabel","control","Checkbox","checked","Button","onClick","cpAvail","result","hasty","slice","variant","solution","i","ExpansionPanel","defaultExpanded","key","ExpansionPanelSummary","expandIcon","Typography","ExpansionPanelDetails","Boolean","solutionSteps","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50e3e6a1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Solver from \"javascript-lp-solver\";\nimport data from \"./data/actions.json\";\nimport Combinatorics from \"js-combinatorics\";\nimport {\n  Button,\n  TextField,\n  Checkbox,\n  FormControlLabel,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Snackbar,\n  Typography\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport Alert from \"@material-ui/lab/Alert\";\n\n/**\n * @typedef {Object} Action\n * @property {string} id\n * @property {count} count\n */\n\n/**\n * @param dur - durability\n * @param manipulation - manipulation stack\n * @param {Array<Action>} sequence - sequence of action\n * @returns {Array<Action>} - re-ordered sequence\n */\n\ndata.singles = {};\nObject.entries(data.sequences).forEach(([k, v]) => {\n  if (!Array.isArray(v)) {\n    data.singles[v] = data.actions[k];\n  }\n});\n\nfunction validate(dur, manipulation, observes, sequence) {\n  let items = [];\n  let finisher = \"\";\n  sequence.forEach(action => {\n    if (action.id.startsWith(\"f\")) {\n      finisher = action.id;\n      return;\n    }\n    items.push(action.id);\n    let count = action.count - 1;\n    while (count > 0) {\n      items.push(action.id);\n      count--;\n    }\n  });\n  while (observes > 0) {\n    items.push(\"ob\");\n    observes--;\n  }\n  let iter = {\n    next: function() {\n      return null;\n    }\n  };\n  if (items && items.length > 0) {\n    iter = Combinatorics.permutation(items);\n  }\n  let seq;\n  while ((seq = iter.next())) {\n    seq = seq.map(id => {\n      return data.sequences[id];\n    });\n    let [d] = calcDurability(dur, manipulation, [\n      ...seq,\n      data.sequences[finisher]\n    ]);\n    if (d >= 1) {\n      return [...seq, data.sequences[finisher]];\n    }\n  }\n  return;\n}\n\nfunction calcDurability(dur, manipulation, seq) {\n  for (let action of seq) {\n    if (!action) {\n      continue;\n    }\n    if (Array.isArray(action)) {\n      [dur, manipulation] = calcDurability(dur, manipulation, action);\n      if (dur < 1) {\n        return [dur, 0];\n      }\n    } else {\n      if (action === \"Manipulation\") {\n        manipulation = 8;\n        continue;\n      }\n      if (data.singles[action] && data.singles[action].durability) {\n        dur -= data.singles[action].durability;\n      }\n\n      if (dur < 1) {\n        return [dur, manipulation];\n      }\n      if (manipulation > 0) {\n        manipulation--;\n        dur += 5;\n        dur = Math.min(dur, 60);\n      }\n    }\n  }\n  return [dur, manipulation];\n}\n\nconst useStyles = makeStyles(theme => ({\n  controlRoot: {\n    \"& .MuiTextField-root\": {\n      marginRight: theme.spacing(1)\n    },\n    marginBottom: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  },\n  solutions: {\n    marginTop: theme.spacing(1)\n  },\n  solutionHeading: {\n    fontSize: theme.typography.pxToRem(18),\n    fontWeight: theme.typography.fontWeightMedium\n  },\n  solutionSubtitle: {\n    fontSize: theme.typography.pxToRem(16),\n    fontWeight: theme.typography.fontWeightBold\n  },\n  icon: {\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction Icon({ action }) {\n  const classes = useStyles();\n  const imgName = action.replace(/\\W/g, \"\");\n  return (\n    <span className={classes.icon}>\n      <img src={`images/actions/${imgName}.png`} alt={action} title={action} />\n    </span>\n  );\n}\n\nfunction solve(cp, durability, manipulation, observes) {\n  if (durability < 0) return;\n  let model = {\n    optimize: \"quality\",\n    opType: \"max\",\n    constraints: {\n      durability: {\n        max: durability + 5 * manipulation - 1\n      },\n      ob: { max: 0 },\n      cp: { max: cp - observes * 7 },\n      finisher: { max: 1 }\n    },\n    variables: data.actions,\n    ints: Object.fromEntries(Object.keys(data.actions).map(a => [a, 1]))\n  };\n  let results = Solver.Solve(model);\n  let quality = 0;\n  console.log(results);\n  results = Object.entries(results)\n    .filter(([k, v]) => data.sequences[k])\n    .map(([id, count]) => ({ id, count }));\n  let cpRemain = cp;\n  results.forEach(({ id, count }) => {\n    quality += count * data.actions[id].quality;\n    cpRemain -= count * data.actions[id].cp;\n  });\n  cpRemain -= observes * 7;\n  let validatedResult = validate(durability, manipulation, observes, results);\n  if (validatedResult) {\n    return {\n      cpRemain,\n      quality,\n      sequence: validatedResult.flat()\n    };\n  } else {\n    return null;\n  }\n}\n\nfunction App() {\n  const [durability, setDurability] = useState(23);\n  const [cp, setCp] = useState(220);\n  const [manipulation, setManipulation] = useState(0);\n  const [solutions, setSolutions] = useState([]);\n  const [carefulSyn, setCarefulSyn] = useState(true);\n  const [showAlert, setShowAlert] = useState(false);\n  const [displayInfo, setDisplayInfo] = useState(true);\n  const classes = useStyles();\n\n  function handleSolve() {\n    let cpAvail = cp;\n    if (carefulSyn) {\n      cpAvail -= 7;\n    }\n    let results = [\n      solve(cpAvail, durability, manipulation, 0)\n      //solve(cpAvail, durability - 5, manipulation, 0),\n      //solve(cpAvail, durability, manipulation, 1),\n      //solve(cpAvail, durability, manipulation, 2)\n    ];\n    let max = null;\n    for (const result of results) {\n      if (!result) {\n        continue;\n      }\n      if (!max) {\n        max = result;\n        continue;\n      }\n      if (result.quality > max.quality) {\n        max = result;\n      }\n    }\n    if (max) {\n      max.hasty = max.sequence.filter(\n        action => action === \"Hasty Touch\"\n      ).length;\n      setSolutions([max, ...solutions.slice(0, 5)]);\n    } else {\n      setShowAlert(true);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <Snackbar\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n        open={showAlert}\n        autoHideDuration={6000}\n        onClose={() => setShowAlert(false)}\n      >\n        <Alert color=\"error\">No solution found.</Alert>\n      </Snackbar>\n      {displayInfo && (\n        <Alert color=\"info\" onClose={() => setDisplayInfo(false)}>\n          This assumes you are 1 Progression step(Basic, Careful Syn) away from\n          finishing with 11 Inner Quiet stacks.\n        </Alert>\n      )}\n      <div className={classes.controlRoot}>\n        <TextField\n          label=\"Durability\"\n          value={durability}\n          onChange={ev =>\n            setDurability(Math.min(80, parseInt(ev.target.value, 10) || 0))\n          }\n        />\n        <TextField\n          label=\"CP\"\n          value={cp}\n          onChange={ev =>\n            setCp(Math.min(700, parseInt(ev.target.value, 10) || 0))\n          }\n        />\n        <TextField\n          label=\"Manipulation Stacks\"\n          value={manipulation}\n          onChange={ev =>\n            setManipulation(Math.min(8, parseInt(ev.target.value, 10) || 0))\n          }\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={carefulSyn}\n              onChange={ev => setCarefulSyn(ev.target.checked)}\n              label=\"Careful Synthesis\"\n            />\n          }\n          label=\"Careful Synthesis\"\n        />\n      </div>\n      <Button onClick={handleSolve} color=\"primary\" variant=\"contained\">\n        Solve\n      </Button>\n      <div className={classes.solutions}>\n        {solutions.map((solution, i) => {\n          return (\n            <ExpansionPanel defaultExpanded={true} key={i}>\n              <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography className={classes.solutionHeading}>\n                  {\" \"}\n                  Q:{solution.quality} H:{solution.hasty} C:{solution.cpRemain}{\" \"}\n                </Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                <div>\n                  <Typography className={classes.solutionSubtitle}>\n                    Quality Gain {solution.quality}{\" \"}\n                    {Boolean(solution.hasty) && (\n                      <span>({solution.hasty} Hasty Touches)</span>\n                    )}\n                  </Typography>\n                  <Typography className={classes.solutionSubtitle}>\n                    CP left: {solution.cpRemain}\n                  </Typography>\n                  <Typography className={classes.solutionSubtitle}>\n                    Steps\n                  </Typography>\n                  <div className={classes.solutionSteps}>\n                    {solution.sequence.map((action, i) => {\n                      return <Icon key={i} action={action} />;\n                    })}\n                  </div>\n                </div>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}